=begin
#Up API

#The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0

=end

require 'cgi'

module OpenapiClient
  class TransactionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List transactions by account
    # Retrieve a list of all transactions for a specific account. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. To narrow the results to a specific date range pass one or both of `filter[since]` and `filter[until]` in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 
    # @param account_id [String] The unique identifier for the account. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records to return in each page. 
    # @option opts [TransactionStatusEnum] :filter_status The transaction status for which to return records. This can be used to filter &#x60;HELD&#x60; transactions from those that are &#x60;SETTLED&#x60;. 
    # @option opts [Time] :filter_since The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
    # @option opts [Time] :filter_until The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
    # @option opts [String] :filter_category The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a &#x60;404&#x60; response. 
    # @option opts [String] :filter_tag A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
    # @return [ListTransactionsResponse]
    def accounts_account_id_transactions_get(account_id, opts = {})
      data, _status_code, _headers = accounts_account_id_transactions_get_with_http_info(account_id, opts)
      data
    end

    # List transactions by account
    # Retrieve a list of all transactions for a specific account. The returned list is [paginated](#pagination) and can be scrolled by following the &#x60;next&#x60; and &#x60;prev&#x60; links where present. To narrow the results to a specific date range pass one or both of &#x60;filter[since]&#x60; and &#x60;filter[until]&#x60; in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 
    # @param account_id [String] The unique identifier for the account. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records to return in each page. 
    # @option opts [TransactionStatusEnum] :filter_status The transaction status for which to return records. This can be used to filter &#x60;HELD&#x60; transactions from those that are &#x60;SETTLED&#x60;. 
    # @option opts [Time] :filter_since The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
    # @option opts [Time] :filter_until The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
    # @option opts [String] :filter_category The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a &#x60;404&#x60; response. 
    # @option opts [String] :filter_tag A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
    # @return [Array<(ListTransactionsResponse, Integer, Hash)>] ListTransactionsResponse data, response status code and response headers
    def accounts_account_id_transactions_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.accounts_account_id_transactions_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TransactionsApi.accounts_account_id_transactions_get"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/transactions'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page[size]'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'filter[status]'] = opts[:'filter_status'] if !opts[:'filter_status'].nil?
      query_params[:'filter[since]'] = opts[:'filter_since'] if !opts[:'filter_since'].nil?
      query_params[:'filter[until]'] = opts[:'filter_until'] if !opts[:'filter_until'].nil?
      query_params[:'filter[category]'] = opts[:'filter_category'] if !opts[:'filter_category'].nil?
      query_params[:'filter[tag]'] = opts[:'filter_tag'] if !opts[:'filter_tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListTransactionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer_auth']

      new_options = opts.merge(
        :operation => :"TransactionsApi.accounts_account_id_transactions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#accounts_account_id_transactions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List transactions
    # Retrieve a list of all transactions across all accounts for the currently authenticated user. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. To narrow the results to a specific date range pass one or both of `filter[since]` and `filter[until]` in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records to return in each page. 
    # @option opts [TransactionStatusEnum] :filter_status The transaction status for which to return records. This can be used to filter &#x60;HELD&#x60; transactions from those that are &#x60;SETTLED&#x60;. 
    # @option opts [Time] :filter_since The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
    # @option opts [Time] :filter_until The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
    # @option opts [String] :filter_category The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a &#x60;404&#x60; response. 
    # @option opts [String] :filter_tag A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
    # @return [ListTransactionsResponse]
    def transactions_get(opts = {})
      data, _status_code, _headers = transactions_get_with_http_info(opts)
      data
    end

    # List transactions
    # Retrieve a list of all transactions across all accounts for the currently authenticated user. The returned list is [paginated](#pagination) and can be scrolled by following the &#x60;next&#x60; and &#x60;prev&#x60; links where present. To narrow the results to a specific date range pass one or both of &#x60;filter[since]&#x60; and &#x60;filter[until]&#x60; in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of records to return in each page. 
    # @option opts [TransactionStatusEnum] :filter_status The transaction status for which to return records. This can be used to filter &#x60;HELD&#x60; transactions from those that are &#x60;SETTLED&#x60;. 
    # @option opts [Time] :filter_since The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
    # @option opts [Time] :filter_until The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes. 
    # @option opts [String] :filter_category The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a &#x60;404&#x60; response. 
    # @option opts [String] :filter_tag A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given. 
    # @return [Array<(ListTransactionsResponse, Integer, Hash)>] ListTransactionsResponse data, response status code and response headers
    def transactions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.transactions_get ...'
      end
      # resource path
      local_var_path = '/transactions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page[size]'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'filter[status]'] = opts[:'filter_status'] if !opts[:'filter_status'].nil?
      query_params[:'filter[since]'] = opts[:'filter_since'] if !opts[:'filter_since'].nil?
      query_params[:'filter[until]'] = opts[:'filter_until'] if !opts[:'filter_until'].nil?
      query_params[:'filter[category]'] = opts[:'filter_category'] if !opts[:'filter_category'].nil?
      query_params[:'filter[tag]'] = opts[:'filter_tag'] if !opts[:'filter_tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListTransactionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer_auth']

      new_options = opts.merge(
        :operation => :"TransactionsApi.transactions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#transactions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve transaction
    # Retrieve a specific transaction by providing its unique identifier. 
    # @param id [String] The unique identifier for the transaction. 
    # @param [Hash] opts the optional parameters
    # @return [GetTransactionResponse]
    def transactions_id_get(id, opts = {})
      data, _status_code, _headers = transactions_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve transaction
    # Retrieve a specific transaction by providing its unique identifier. 
    # @param id [String] The unique identifier for the transaction. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTransactionResponse, Integer, Hash)>] GetTransactionResponse data, response status code and response headers
    def transactions_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.transactions_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TransactionsApi.transactions_id_get"
      end
      # resource path
      local_var_path = '/transactions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer_auth']

      new_options = opts.merge(
        :operation => :"TransactionsApi.transactions_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#transactions_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
